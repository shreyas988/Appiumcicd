<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="3" passed="2" failed="1" skipped="0">
  <reporter-output>
    <line>
      <![CDATA[This is sample screenshot]]>
    </line>
    <line>
      <![CDATA[<a href='/Users/shreyas/TDD/TDDFramework/Screenshots/Android_Any device name_03-12-2020-12-10-44/LoginTests/invalidPassword.png'> <img src='/Users/shreyas/TDD/TDDFramework/Screenshots/Android_Any device name_03-12-2020-12-10-44/LoginTests/invalidPassword.png' height='100' width='100'/></a>]]>
    </line>
  </reporter-output>
  <suite started-at="2020-12-03T06:40:44Z" name="Suite" finished-at="2020-12-03T06:41:10Z" duration-ms="26248">
    <groups>
    </groups>
    <test started-at="2020-12-03T06:40:44Z" name="Android" finished-at="2020-12-03T06:41:10Z" duration-ms="26248">
      <class name="com.qa.tests.LoginTests">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:40:42Z" name="beforeSuite" finished-at="2020-12-03T06:40:44Z" duration-ms="1107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeTest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:40:44Z" name="beforeTest" finished-at="2020-12-03T06:40:52Z" duration-ms="8000" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Any device name]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[11000]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[iOSOnly]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[iOSOnly]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:40:52Z" name="beforeClass" finished-at="2020-12-03T06:40:53Z" duration-ms="1617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:40:53Z" name="beforeMethod" finished-at="2020-12-03T06:40:53Z" duration-ms="124" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.invalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidPassword()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:40:53Z" name="invalidPassword" finished-at="2020-12-03T06:41:00Z" duration-ms="6893" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Username and password do not match any user in this service.new] but found [Username and password do not match any user in this service.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Username and password do not match any user in this service.new] but found [Username and password do not match any user in this service.]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:453)
at org.testng.Assert.assertEquals(Assert.java:463)
at com.qa.tests.LoginTests.invalidPassword(LoginTests.java:116)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[This is sample screenshot]]>
            </line>
            <line>
              <![CDATA[<a href='/Users/shreyas/TDD/TDDFramework/Screenshots/Android_Any device name_03-12-2020-12-10-44/LoginTests/invalidPassword.png'> <img src='/Users/shreyas/TDD/TDDFramework/Screenshots/Android_Any device name_03-12-2020-12-10-44/LoginTests/invalidPassword.png' height='100' width='100'/></a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- invalidPassword -->
        <test-method is-config="true" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:01Z" name="afterMethod" finished-at="2020-12-03T06:41:01Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.invalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:01Z" name="beforeMethod" finished-at="2020-12-03T06:41:01Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.invalidusername()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="invalidusername()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:01Z" name="invalidusername" finished-at="2020-12-03T06:41:05Z" duration-ms="4504" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidusername -->
        <test-method is-config="true" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:05Z" name="afterMethod" finished-at="2020-12-03T06:41:05Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.invalidusername()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:05Z" name="beforeMethod" finished-at="2020-12-03T06:41:05Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.successLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="successLogin()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:05Z" name="successLogin" finished-at="2020-12-03T06:41:09Z" duration-ms="4182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successLogin -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:09Z" name="afterClass" finished-at="2020-12-03T06:41:09Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(java.lang.reflect.Method)[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:09Z" name="afterMethod" finished-at="2020-12-03T06:41:09Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.qa.tests.LoginTests.successLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:09Z" name="afterTest" finished-at="2020-12-03T06:41:10Z" duration-ms="377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:com.qa.tests.LoginTests@3967e60c]" started-at="2020-12-03T06:41:10Z" name="afterSuite" finished-at="2020-12-03T06:41:10Z" duration-ms="79" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- com.qa.tests.LoginTests -->
    </test> <!-- Android -->
  </suite> <!-- Suite -->
</testng-results>
